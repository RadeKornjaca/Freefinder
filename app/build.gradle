apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {
    compileSdkVersion 27
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "org.freefinder"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
//        vectorDrawables.useSupportLibrary = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:1.3.9'
    }
    buildTypes {
        def hostname = getLocalIp("wlo1")
        def api_url = "\"http://${hostname}:5200/api/\""

        debug {
            buildConfigField 'String', 'API_URL', api_url
            buildConfigField 'String', 'USERS', '"users"'
            buildConfigField 'String', 'DEVICE_SIGN_IN', '"device_sign_in"'
            buildConfigField 'String', 'CATEGORIES', '"categories"'
            buildConfigField 'String', 'PLACES', '"places"'
            buildConfigField 'String', 'RATINGS', '"ratings"'
            buildConfigField 'String', 'REVISIONS', '"revisions"'
            buildConfigField 'String', 'VISIT', '"visit"'
        }

        release {
            buildConfigField 'String', 'API_URL', api_url
            buildConfigField 'String', 'USERS', '"users"'
            buildConfigField 'String', 'DEVICE_SIGN_IN', '"device_sign_in"'
            buildConfigField 'String', 'CATEGORIES', '"categories"'
            buildConfigField 'String', 'PLACES', '"places"'
            buildConfigField 'String', 'RATINGS', '"ratings"'
            buildConfigField 'String', 'REVISIONS', '"revisions"'
            buildConfigField 'String', 'VISIT', '"visit"'

            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
//    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
//        exclude group: 'com.android.support', module: 'support-annotations'
//    })
//    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:2.2.2'

    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-intents:3.0.2'

    debugImplementation 'com.android.support.test.espresso:espresso-idling-resource:3.0.2'
    debugImplementation 'com.jakewharton.espresso:okhttp3-idling-resource:1.0.0'

    implementation 'com.android.support:appcompat-v7:27.1.1'
    implementation 'com.android.support:support-v4:27.1.1'
    implementation 'com.android.support:design:27.1.1'
    implementation 'com.android.support:recyclerview-v7:27.1.1'
    implementation 'com.android.support.constraint:constraint-layout:1.0.1'
    implementation 'com.android.volley:volley:1.0.0'
    implementation 'com.google.code.gson:gson:2.8.2'

    implementation 'com.squareup.retrofit2:retrofit:2.1.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.1.0'
    implementation 'com.squareup.okhttp3:okhttp:3.7.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.7.0'

    implementation 'org.osmdroid:osmdroid-android:5.6.4'
    implementation 'com.github.MKergall:osmbonuspack:6.4'

    implementation 'com.jakewharton:butterknife:8.7.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.7.0'

    implementation 'com.google.dagger:dagger-android:2.13'
    implementation 'com.google.dagger:dagger-android-support:2.13' // if you use the support libraries
    annotationProcessor 'com.google.dagger:dagger-android-processor:2.13'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.13'

    implementation 'io.realm:android-adapters:2.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.mockito:mockito-core:1.10.19'

}

// Get the ip address by interface name
def getLocalIp(String interfaceName) {
    NetworkInterface iface = NetworkInterface.getByName(interfaceName);
    for (InterfaceAddress address : iface.getInterfaceAddresses()) {
        String ip = address.getAddress().getHostAddress()
        if (ip.length() <= 15) {
            return ip;
        }
    }
}
